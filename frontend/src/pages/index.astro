---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<div class="container">
			<h1>My Chat App</h1>
			<a href="/room">Go to chat rooms</a>
			<form class="message-form" action="">
				<input type="text" id="usernameInput" placeholder="Enter your username">
				<input type="text" id="messageInput" placeholder="Enter your message">
				<button type="submit">Send message</button>
			</form>

			<h2>Messages</h2>
			<ul class="messages"></ul>
		</div>

		<script type="module">
			import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";

			const socket = io('http://localhost:3000') // Socket backend url

			//fetch chat history
			const fetchChatHistory = async () => {
				const res = await fetch(`http://localhost:3000/api/chat`, {
					credentials: 'include'
				})
				if (res.ok){
					const data = await res.json()
					console.log(data)
					setChatHistory(data);
				}else{
					console.log("no history")
				}
			}
			
			const setChatHistory = (data) => {
				if(data.length){
					data.forEach(element => {
						const messages = document.querySelector('.messages')
						const li = document.createElement('li')
						li.innerHTML = `<strong>${element.username}:</strong> ${element.message}`
						messages.appendChild(li)
					});
				}
			}
			fetchChatHistory();
			const username = "" 
			socket.emit('join room', { room: "Room0", username });

			// Send message
			const messageForm = document.querySelector('.message-form')
				messageForm.addEventListener('submit', (e) => {
					e.preventDefault()
					const usernameInput = messageForm.querySelector('#usernameInput').value.trim()
					const messageInput = messageForm.querySelector('#messageInput')
					socket.emit('sendMessage', { username: usernameInput, message: messageInput.value.trim(), room: "Room0" }) // Send message to server
					messageInput.value = ''
				})

			// Listen for any messages from the server
			socket.on('newMessage', (data) => { // will keep listening
				console.log(data)
				const messages = document.querySelector('.messages')
				const li = document.createElement('li')
				li.innerHTML = `<strong>${data.username}:</strong> ${data.message}`
				messages.prepend(li)
			})
		</script>
	</body>
</html>
